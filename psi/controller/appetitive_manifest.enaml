import numpy as np


from enaml.application import deferred_call
from enaml.layout.api import InsertItem
from enaml.widgets.api import Action, DockItem, Container, Label
from enaml.workbench.api import Extension, PluginManifest, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, Autostart

from ..context.api import ContextGroup, Parameter, Result
from ..context.selector import SequenceSelector, SingleSetting

from .base_manifest import ControllerManifest
from .appetitive_plugin import AppetitivePlugin, Event
from ..util import rpc


PLUGIN_ID = 'psi.controller'


def get_status(trial, trial_type, experiment_state):
    # Experiment not running
    if experiment_state == 'paused':
        return 'Experiment paused'
    elif experiment_state == 'initialized':
        return 'Waiting to start'
    elif experiment_state == 'stopped':
        return 'Experiment complete'

    # Experiment running
    if '_' in trial_type:
        general, specific = trial_type.split('_') 
        label = '{} ({})'.format(general, specific)
    else:
        label = trial_type
    return 'Trial {}: {}'.format(trial, label)


def get_state(trial_state):
    if trial_state is None:
        return ''
    else:
        return trial_state.value.capitalize()


enamldef ControllerStateDockItem(DockItem):

    attr controller

    Container:
        Label:
            text << get_status(controller.trial, controller.trial_type,
                               controller.experiment_state)
        Label:
            text << get_state(controller.trial_state)


def contribute_to_workspace(workbench, workspace):
    plugin = workbench.get_plugin(PLUGIN_ID)
    item = ControllerStateDockItem(workspace.dock_area, controller=plugin,
                                   name='controller_state', title='Status')
    op = InsertItem(item=item.name, position='top')
    deferred_call(workspace.dock_area.update_layout, op)


enamldef AppetitiveManifest(ControllerManifest): manifest:
    '''
    Defines the core settings that any appetitive experiment may require. Does
    not include timeout/reward settings as those are provided by plugins.
    '''

    id = PLUGIN_ID
    factory = AppetitivePlugin

    Extension:
        id = 'debug_toolbar'
        rank = 1000
        point = 'psi.experiment.toolbar'
        Action:
            text = 'Target + reward'
            triggered ::
                plugin = workbench.get_plugin(PLUGIN_ID)
                with plugin.lock:
                    plugin.start_trial()
                    plugin.invoke_actions('deliver_reward', plugin.get_ts())
                    plugin.end_trial('reward')
            enabled <<  workbench.get_plugin(PLUGIN_ID).experiment_state \
                not in ('initialized', 'stopped')
        Action:
            text = 'Poke'
            checkable = True
            toggled ::
                plugin = workbench.get_plugin(PLUGIN_ID)
                if checked:
                    plugin.handle_event(Event.np_start)
                else:
                    plugin.handle_event(Event.np_end)
            enabled <<  workbench.get_plugin(PLUGIN_ID).experiment_state \
                not in ('initialized', 'stopped')
        Action:
            text = 'Spout'
            triggered ::
                plugin = workbench.get_plugin(PLUGIN_ID)
                plugin.handle_event(Event.reward_start)
                plugin.handle_event(Event.reward_end)
            enabled << workbench.get_plugin(PLUGIN_ID).experiment_state \
                not in ('initialized', 'stopped')

    # Parameters used by the appetitive Go-Nogo controller.
    Extension:
        id = 'items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'trial'
            label = 'Trial Settings'

        Parameter:
            name = 'iti_duration'
            label = 'Intertrial interval (s)'
            compact_label = 'ITI'
            dtype = np.dtype('float32')
            default = 0.1
            expression = '0.1'
            group = 'trial'
            scope = 'trial'
        Parameter:
            name = 'to_duration'
            label = 'Timeout duration (s)'
            compact_label = 'TO'
            dtype = np.dtype('float32')
            default = 1.0
            expression = '1'
            group = 'trial'
            scope = 'trial'
        Parameter:
            name = 'hold_duration'
            label = 'Hold duration (s)'
            compact_label = 'Hold'
            dtype = np.dtype('float32')
            default = 0.0
            expression = '0'
            group = 'trial'
            scope = 'trial'
        Parameter:
            name = 'response_duration'
            label = 'Response duration (s)'
            compact_label = 'Resp'
            dtype = np.dtype('float32')
            default = 3.0
            expression = '3'
            group = 'trial'
            scope = 'trial'
        Parameter:
            name = 'np_duration'
            label = 'Poke duration (s)'
            compact_label = 'Poke'
            dtype = np.dtype('float32')
            default = 0.2
            expression = '0.2'
            group = 'trial'
            scope = 'trial'
        Parameter:
            name = 'training_mode'
            label = 'Training mode'
            compact_label = 'train'
            dtype = np.dtype('bool')
            default = False
            expression = 'False'
            group = 'trial'
            scope = 'experiment'
                
        ContextGroup:
            name = 'selector'
            label = 'Next value'

        Parameter:
            name = 'go_probability'
            label = 'Go probability'
            compact_label = 'Pr'
            dtype = np.dtype('float32')
            expression = '0.5'
            group = 'selector'
            scope = 'arbitrary'
        Parameter:
            name = 'max_nogo'
            label = 'Max. consecutive nogo trials'
            compact_label = 'MG'
            dtype = np.dtype('float32')
            expression = '5'
            group = 'selector'
            scope = 'arbitrary'
        Parameter:
            name = 'repeat_fa'
            label = 'Repeat FA?'
            compact_label = 'RFA'
            dtype = np.dtype('bool')
            expression = 'True'
            group = 'selector'
            scope = 'arbitrary'

        ContextGroup:
            name = 'results'
            label = 'Trial results'
            visible = False

        Result:
            name = 'response'
            label = 'Response'
            compact_label = 'Resp.'
            dtype = np.dtype('S32')
            group = 'results'
        Result:
            name = 'trial_type'
            label = 'Trial type'
            compact_label = 'Trial type'
            group = 'results'
            dtype = np.dtype('S32')
        Result:
            name = 'score'
            label = 'Score'
            compact_label = 'Score'
            group = 'results'
            dtype = np.dtype('S32')
        Result:
            name = 'correct'
            label = 'Correct'
            compact_label = 'C'
            group = 'results'
            dtype = np.dtype('bool')
        Result:
            name = 'np_start'
            label = 'Nose-poke start'
            compact_label = 'NP/'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'np_end'
            label = 'Nose-poke end'
            compact_label = 'NP\\'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'response_ts'
            label = 'Response timestamp'
            compact_label = 'R|'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'target_start'
            label = 'Target start'
            compact_label = 'T/'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'target_end'
            label = 'Target end'
            compact_label = 'T\\'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'reaction_time'
            label = 'Reaction time'
            compact_label = 'React. time'
            group = 'results'
            dtype = np.dtype('float32')
        Result:
            name = 'response_time'
            label = 'Response time'
            compact_label = 'Resp. time'
            group = 'results'
            dtype = np.dtype('float32')
            
    # Sequences used by the appetitive Go-Nogo controller.
    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'
        SequenceSelector:
            name = 'go'
        SingleSetting:
            name = 'nogo'
        SingleSetting:
            name = 'remind'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        factory = contribute_to_workspace
